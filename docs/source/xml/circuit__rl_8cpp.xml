<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="circuit__rl_8cpp" kind="file" language="C++">
    <compoundname>circuit_rl.cpp</compoundname>
    <includes refid="circuit__rl_8h" local="yes">../include/circuit_rl.h</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="3">
        <label>circuit.h</label>
        <link refid="circuit_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="1">
        <label>/home/kruksik/own_projects/ElectricCircuitSim/src/cpp/src/circuit_rl.cpp</label>
        <link refid="circuit__rl_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/circuit_rl.h</label>
        <link refid="circuit__rl_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>generator.h</label>
        <link refid="generator_8h"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/circuit_rl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="classCircuitRL_1a9157da1ac4793726728dbbf57cc49af3" kindref="member">CircuitRL::CircuitRL</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>resistance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inductance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>resistance(resistance),<sp/>inductance(inductance),<sp/>current(current)</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">std::vector&lt;std::tuple&lt;double,<sp/>double,<sp/>double&gt;&gt;<sp/><ref refid="classCircuitRL_1a1d6117d3970da8f38913e91787ca58bd" kindref="member">CircuitRL::simulate</ref>(</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classIGenerator" kindref="compound">IGenerator</ref><sp/>&amp;generator,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::tuple&lt;double,<sp/>double,<sp/>double&gt;&gt;<sp/>result;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(time<sp/>&lt;=<sp/>t_end)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>voltage<sp/>=<sp/>generator.<ref refid="classIGenerator_1a6e21c100370c01bcd97a277b49c7aa21" kindref="member">calculateVoltage</ref>(time);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_change<sp/>=<sp/>(voltage<sp/>-<sp/>resistance<sp/>*<sp/>current)<sp/>/<sp/>inductance<sp/>*<sp/>dt;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>+=<sp/>current_change;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(std::make_tuple(time,<sp/>voltage,<sp/>current));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>+=<sp/>dt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/kruksik/own_projects/ElectricCircuitSim/src/cpp/src/circuit_rl.cpp"/>
  </compounddef>
</doxygen>
